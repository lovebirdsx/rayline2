local Block = require 'lib.play.block.block'
local Helper = require 'lib.common.helper'
local Config = require 'lib.config.base'

go.property('width', 600)
go.property('height', 800)
go.property('row', 7)
go.property('col', 6)

local function create_block(self, row, col, block)
    local pos = go.get_position()
    local x = pos.x - self.width / 2 + (col - 1) * self.block_w + self.block_w / 2
    local y = pos.y + self.height / 2 - (row - 1) * self.block_h - self.block_h / 2
    local block_go = factory.create('#factory', vmath.vector3(x, y, pos.z), nil, {}, Config.SelectorHexScale)

    msg.post(block_go, 'set_parent', {parent_id = go.get_id()})
    msg.post(block_go, 'bind', {id = Helper.push_table(block)})
    return block_go
end

function init(self)
    self.block_w = self.width / self.col
    self.block_h = self.height / self.row

    self.blocks_go = {}
    self.blocks = {}
end

local function on_msg_update(self)
    -- delete prev
    for row_id, row in ipairs(self.blocks_go) do
        go.delete_all(row)
    end

    local blocks = self.policy:get_all_blocks()

    self.blocks_go = {}
    self.blocks = {}
    for row = 1, self.row do
        self.blocks_go[row] = {}
        self.blocks[row] = {}
        for col = 1, self.col do
            local id = (row - 1) * self.col + col
            if id <= #blocks then
                self.blocks_go[row][col] = create_block(self, row, col, blocks[id])
                self.blocks[row][col] = blocks[id]
            end
        end
    end
end

function final(self)
    for row_id, row in ipairs(self.blocks_go) do
        go.delete_all(row)
    end
end

local function get_select_block(self, pos)
    local self_pos = go.get_position()
    local x, y = pos.x, pos.y

    -- check if in range
    local sx, sy = self_pos.x, self_pos.y
	if 	    x >= sx - self.width / 2
		and x <= sx + self.width / 2
		and y >= sy - self.height / 2
		and y <= sy + self.height / 2 then
		local row = math.floor(((sy + self.height / 2) - y) / self.block_h) + 1
        local col = math.floor((x - (sx - self.width / 2)) / self.block_w) + 1

        return self.blocks_go[row][col], self.blocks[row][col]
	end
end

function on_message(self, message_id, message, sender)
    if message_id == hash('disable') then
        self.enable = false
    elseif message_id == hash('enable') then
        self.enable = true
    elseif message_id == hash('bind_policy') then
        self.policy = Helper.pop_table(message.id)
        msg.post('.', 'update')
    elseif message_id == hash('update') then
        on_msg_update(self)
    end
end

function on_input(self, action_id, action)
    if not self.enable then return false end

    if action_id == hash('touch') and action.pressed then
        local pos = Helper.action_to_pos(action)
        local block_go, block = get_select_block(self, pos)
        if block_go then
            msg.post('manager', 'select_block_type', {block_id = Helper.push_table(block)})
        end
    end

    return true
end
