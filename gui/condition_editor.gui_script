local dirtylarry = require 'dirtylarry.dirtylarry'
local ConditionManager = require 'lib.play.condition.manager'
local ConditionType = require 'lib.play.condition.type'
local ConditionFactory = require 'lib.play.condition.factory'
local Helper = require 'lib.common.helper'

local MAX_CONDITION = 2
local MAX_FIELD = 2

local function update_ui(self)
	for i = 1, MAX_CONDITION do
		local name = 'condition' .. i
		local root_node = gui.get_node(name .. '/root')

		local c = self.cm:get_condition(i)

		if c then
			gui.set_enabled(root_node, true)
			local type_node = gui.get_node(name .. '/type')
			gui.set_text(type_node, ('Condition: %s'):format(c:get_type_string()))

			local fields = c:get_filed_names()
			for fid = 1, MAX_FIELD do
				local field = fields[fid]
				if field then
					gui.set_text(gui.get_node(name .. '/field' .. fid), field)
					gui.set_enabled(gui.get_node(name .. '/field' .. fid), true)
					gui.set_enabled(gui.get_node(name .. '/input' .. fid .. '/bg'), true)
				else
					gui.set_enabled(gui.get_node(name .. '/field' .. fid), false)
					gui.set_enabled(gui.get_node(name .. '/input' .. fid .. '/bg'), false)
				end
			end
		else
			gui.set_enabled(root_node, false)
		end
	end
end

local function bind_data(self)
	for i = 1, self.cm:get_condition_count() do
		local c = self.cm:get_condition(i)
		local fields = c:get_filed_names()
		for fid, fname in ipairs(fields) do
			local set_fun = c['set_' .. fname]
			local value = tonumber(self.input[i][fid])
			if value then
				set_fun(c, value)
			end
		end
	end
end

function init(self)
	self.cm = ConditionManager()
	update_ui(self)
	self.condition_type = ConditionType.ClearAll

	self.input = {}
	for i = 1, MAX_CONDITION do
		self.input[i] = {}
	end
end

function final(self)
end

function update(self, dt)

end

local function on_bind(self, message, sender)
	local cm = Helper.pop_table(message.id)
	self.cm = cm
	self.binder = sender
	update_ui(self)
end

function on_message(self, message_id, message, sender)
	if message_id == hash('bind') then
		on_bind(self, message, sender)
	end
end

local function on_condition_input(self, condition_id, action_id, action)
	local c = self.cm:get_condition(condition_id)

	local name = 'condition' .. condition_id

	local field_names = c:get_filed_names()
	for i = 1, MAX_FIELD do
		local field = field_names[i]
		if field then
			local node_name = name .. '/input' .. i
			local default_value = tostring(c['get_' .. field](c))
			self.input[condition_id][i] = dirtylarry:input(node_name, action_id, action, gui.KEYBOARD_TYPE_NUMBER_PAD, default_value)
		end
	end
end

local function add_condition(self)
	if not self.binder then return end

	if self.cm:get_condition_count() >= MAX_CONDITION then
		return
	end

	local c = ConditionFactory.create(self.condition_type)
	self.cm:add_condition(c)
	update_ui(self)
end

local function rem_condition(self, c_id)
	self.cm:rem_condition(c_id)
	update_ui(self)
end

local function exit(self)
	if self.binder then
		bind_data(self)
		msg.post(self.binder, 'finish_edit_conditions')
	end
end

function on_input(self, action_id, action)
	dirtylarry:button('button_add', action_id, action, add_condition, self)
	dirtylarry:button('button_ok', action_id, action, exit, self)
	dirtylarry:button('condition1/button_rem', action_id, action, rem_condition, self, 1)
	dirtylarry:button('condition2/button_rem', action_id, action, rem_condition, self, 2)

	self.condition_type = dirtylarry:radio('radio_score', action_id, action, ConditionType.Score, self.condition_type)
    self.condition_type = dirtylarry:radio('radio_clear_all', action_id, action, ConditionType.ClearAll, self.condition_type)
    self.condition_type = dirtylarry:radio('radio_clear_icing', action_id, action, ConditionType.ClearIcing, self.condition_type)
    self.condition_type = dirtylarry:radio('radio_clear_ice', action_id, action, ConditionType.ClearIce, self.condition_type)
    self.condition_type = dirtylarry:radio('radio_locate_score', action_id, action, ConditionType.LocateScore, self.condition_type)
    self.condition_type = dirtylarry:radio('radio_time_score', action_id, action, ConditionType.TimeScore, self.condition_type)
    self.condition_type = dirtylarry:radio('radio_locate', action_id, action, ConditionType.Locate, self.condition_type)
    self.condition_type = dirtylarry:radio('radio_clear_diamond', action_id, action, ConditionType.ClearDiamond, self.condition_type)

	for i = 1, MAX_CONDITION do
		if self.cm:get_condition(i) then
			on_condition_input(self, i, action_id, action)
		end
	end

	return true
end

function on_reload(self)

end
